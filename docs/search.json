[
  {
    "objectID": "ST563Project1.html",
    "href": "ST563Project1.html",
    "title": "ST563Project1",
    "section": "",
    "text": "Let’s load necessary libraries before we begin:\nlibrary(tidyverse)\n\nWarning: package 'tidyverse' was built under R version 4.2.3\n\n\nWarning: package 'ggplot2' was built under R version 4.2.3\n\n\nWarning: package 'tibble' was built under R version 4.2.3\n\n\nWarning: package 'tidyr' was built under R version 4.2.3\n\n\nWarning: package 'readr' was built under R version 4.2.3\n\n\nWarning: package 'purrr' was built under R version 4.2.3\n\n\nWarning: package 'dplyr' was built under R version 4.2.3\n\n\nWarning: package 'stringr' was built under R version 4.2.2\n\n\nWarning: package 'forcats' was built under R version 4.2.3\n\n\nWarning: package 'lubridate' was built under R version 4.2.3\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(caret)\n\nLoading required package: lattice\n\nAttaching package: 'caret'\n\nThe following object is masked from 'package:purrr':\n\n    lift\n\nlibrary(rstatix)\n\nWarning: package 'rstatix' was built under R version 4.2.3\n\n\n\nAttaching package: 'rstatix'\n\nThe following object is masked from 'package:stats':\n\n    filter\n\nlibrary(kableExtra)\n\nWarning: package 'kableExtra' was built under R version 4.2.3\n\n\n\nAttaching package: 'kableExtra'\n\nThe following object is masked from 'package:dplyr':\n\n    group_rows\n\nlibrary(randomForest)\n\nrandomForest 4.7-1.2\nType rfNews() to see new features/changes/bug fixes.\n\nAttaching package: 'randomForest'\n\nThe following object is masked from 'package:dplyr':\n\n    combine\n\nThe following object is masked from 'package:ggplot2':\n\n    margin\n\nwarnings=FALSE\n#shorten name of the dataset for ease of use throughout text\ndataset &lt;- \"Taiwanese Bankruptcy Prediction\"\n#read in dataset\ndata &lt;- read.csv(\"./bankruptcy.csv\")\n#create varirable describing length of dataset (nrow()).\nl &lt;- nrow(data)\n#define number of response variables\nr &lt;- 1\n#create variable to describe number of feature variables\nw &lt;- length(names(data))-1"
  },
  {
    "objectID": "ST563Project1.html#introduction",
    "href": "ST563Project1.html#introduction",
    "title": "ST563Project1",
    "section": "Introduction",
    "text": "Introduction\n\nEvaluating multiple models to determine the importance of the features to their ability to predict bankruptcy.\nThe Taiwanese Bankruptcy Prediction dataset was downloaded from the UCI Machine Learning Repository. There are 6819 observations and 95 feature variables. There is 1 binary response variable(s), \"Bankrupt.\". The response variable takes on the values of 0 or 1 and respectively correspond to not going bankrupt and going bankrupt. The feature variables consist of many common business metrics.\nDue to the number of variables, we’ll rename them for ease of use in this program. We will also evaluate for collinearity since many of the variables appear to be related based on my basic understanding of the terminology. I will choose a subset of the feature variables to evaluate for this project.\nThe goal of this project is to see if we can predict whether or not a company will go bankrupt or not based on the data contained in this dataset. In order to reach this goal, we will evaluate and tune multiple model families to see which model can predict the best, then at the end we will model the entire dataset. Our ability to model and predict bankruptcy is important to investors to be able to understand how their investments may perform based on common business metrics. An investor may be able to recoup some of their investment from a poorly performing investment, but bankruptcy may shield the investment from the ability of the investor to recoup any capitol and result in a large and maximal loss for the investor 1.\nBeing able to understand how the different metrics related to bankruptcy status can also help investors, boards, and management make changes to the specific metric that could prevent bankruptcy in the future.\nOne caveat to point out is that the Taiwanese GAAP 2 (generally accepted accounting principles) may be different than those in the US and understanding these differences are beyond the scope of this project. This means the model determined as “best” from this Taiwanese Bankruptcy Prediction dataset may not predict in a similar fashion with data obtained in the United States. Further analyses on US based companies would likely be necessary to provide better prediction in the United States.\n\n\nData Cleaning and Organization\nBefore analyzing the data in the models, we need to make some transformations to make the variables easier to manage and we need to reduce the number of variables in total.\nFirst, let’s see what the data structure is:\n\n#check data structure\nstr(data)\n\n'data.frame':   6819 obs. of  96 variables:\n $ Bankrupt.                                              : int  1 1 1 1 1 1 0 0 0 0 ...\n $ ROA.C..before.interest.and.depreciation.before.interest: num  0.371 0.464 0.426 0.4 0.465 ...\n $ ROA.A..before.interest.and...after.tax                 : num  0.424 0.538 0.499 0.451 0.538 ...\n $ ROA.B..before.interest.and.depreciation.after.tax      : num  0.406 0.517 0.472 0.458 0.522 ...\n $ Operating.Gross.Margin                                 : num  0.601 0.61 0.601 0.584 0.599 ...\n $ Realized.Sales.Gross.Margin                            : num  0.601 0.61 0.601 0.584 0.599 ...\n $ Operating.Profit.Rate                                  : num  0.999 0.999 0.999 0.999 0.999 ...\n $ Pre.tax.net.Interest.Rate                              : num  0.797 0.797 0.796 0.797 0.797 ...\n $ After.tax.net.Interest.Rate                            : num  0.809 0.809 0.808 0.809 0.809 ...\n $ Non.industry.income.and.expenditure.revenue            : num  0.303 0.304 0.302 0.303 0.303 ...\n $ Continuous.interest.rate..after.tax.                   : num  0.781 0.782 0.78 0.781 0.782 ...\n $ Operating.Expense.Rate                                 : num  1.26e-04 2.90e-04 2.36e-04 1.08e-04 7.89e+09 ...\n $ Research.and.development.expense.rate                  : num  0.00 0.00 2.55e+07 0.00 0.00 0.00 7.30e+08 5.09e+07 0.00 0.00 ...\n $ Cash.flow.rate                                         : num  0.458 0.462 0.459 0.466 0.463 ...\n $ Interest.bearing.debt.interest.rate                    : num  0.000725 0.000647 0.00079 0.000449 0.000686 ...\n $ Tax.rate..A.                                           : num  0 0 0 0 0 ...\n $ Net.Value.Per.Share..B.                                : num  0.148 0.182 0.178 0.154 0.168 ...\n $ Net.Value.Per.Share..A.                                : num  0.148 0.182 0.178 0.154 0.168 ...\n $ Net.Value.Per.Share..C.                                : num  0.148 0.182 0.194 0.154 0.168 ...\n $ Persistent.EPS.in.the.Last.Four.Seasons                : num  0.169 0.209 0.181 0.194 0.213 ...\n $ Cash.Flow.Per.Share                                    : num  0.312 0.318 0.307 0.322 0.319 ...\n $ Revenue.Per.Share..Yuan...                             : num  0.01756 0.02114 0.00594 0.01437 0.02969 ...\n $ Operating.Profit.Per.Share..Yuan...                    : num  0.0959 0.0937 0.0923 0.0778 0.0969 ...\n $ Per.Share.Net.profit.before.tax..Yuan...               : num  0.139 0.17 0.143 0.149 0.168 ...\n $ Realized.Sales.Gross.Profit.Growth.Rate                : num  0.0221 0.0221 0.0228 0.022 0.0221 ...\n $ Operating.Profit.Growth.Rate                           : num  0.848 0.848 0.848 0.848 0.848 ...\n $ After.tax.Net.Profit.Growth.Rate                       : num  0.689 0.69 0.689 0.689 0.69 ...\n $ Regular.Net.Profit.Growth.Rate                         : num  0.689 0.69 0.689 0.689 0.69 ...\n $ Continuous.Net.Profit.Growth.Rate                      : num  0.218 0.218 0.218 0.218 0.218 ...\n $ Total.Asset.Growth.Rate                                : num  4.98e+09 6.11e+09 7.28e+09 4.88e+09 5.51e+09 6.08e+08 5.72e+09 6.63e+09 6.89e+09 5.55e+09 ...\n $ Net.Value.Growth.Rate                                  : num  0.000327 0.000443 0.000396 0.000382 0.000439 ...\n $ Total.Asset.Return.Growth.Rate.Ratio                   : num  0.263 0.265 0.264 0.263 0.265 ...\n $ Cash.Reinvestment..                                    : num  0.364 0.377 0.369 0.384 0.38 ...\n $ Current.Ratio                                          : num  0.00226 0.00602 0.01154 0.00419 0.00602 ...\n $ Quick.Ratio                                            : num  0.00121 0.00404 0.00535 0.0029 0.00373 ...\n $ Interest.Expense.Ratio                                 : num  0.63 0.635 0.63 0.63 0.636 ...\n $ Total.debt.Total.net.worth                             : num  0.02127 0.0125 0.02125 0.00957 0.00515 ...\n $ Debt.ratio..                                           : num  0.208 0.171 0.208 0.151 0.107 ...\n $ Net.worth.Assets                                       : num  0.792 0.829 0.792 0.849 0.893 ...\n $ Long.term.fund.suitability.ratio..A.                   : num  0.00502 0.00506 0.0051 0.00505 0.0053 ...\n $ Borrowing.dependency                                   : num  0.39 0.377 0.379 0.38 0.375 ...\n $ Contingent.liabilities.Net.worth                       : num  0.00648 0.00584 0.00656 0.00537 0.00662 ...\n $ Operating.profit.Paid.in.capital                       : num  0.0959 0.0937 0.0923 0.0777 0.0969 ...\n $ Net.profit.before.tax.Paid.in.capital                  : num  0.138 0.169 0.148 0.148 0.167 ...\n $ Inventory.and.accounts.receivable.Net.value            : num  0.398 0.398 0.407 0.398 0.4 ...\n $ Total.Asset.Turnover                                   : num  0.087 0.0645 0.015 0.09 0.1754 ...\n $ Accounts.Receivable.Turnover                           : num  0.00181 0.00129 0.0015 0.00197 0.00145 ...\n $ Average.Collection.Days                                : num  0.00349 0.00492 0.00423 0.00321 0.00437 ...\n $ Inventory.Turnover.Rate..times.                        : num  1.82e-04 9.36e+09 6.50e+07 7.13e+09 1.63e-04 ...\n $ Fixed.Assets.Turnover.Frequency                        : num  1.17e-04 7.19e+08 2.65e+09 9.15e+09 2.94e-04 ...\n $ Net.Worth.Turnover.Rate..times.                        : num  0.0329 0.0255 0.0134 0.0281 0.0402 ...\n $ Revenue.per.person                                     : num  0.03416 0.00689 0.029 0.01546 0.05811 ...\n $ Operating.profit.per.person                            : num  0.393 0.392 0.382 0.378 0.394 ...\n $ Allocation.rate.per.person                             : num  0.0371 0.0123 0.141 0.0213 0.024 ...\n $ Working.Capital.to.Total.Assets                        : num  0.673 0.751 0.83 0.726 0.752 ...\n $ Quick.Assets.Total.Assets                              : num  0.167 0.127 0.34 0.162 0.26 ...\n $ Current.Assets.Total.Assets                            : num  0.191 0.182 0.603 0.226 0.358 ...\n $ Cash.Total.Assets                                      : num  0.004094 0.014948 0.000991 0.018851 0.014161 ...\n $ Quick.Assets.Current.Liability                         : num  0.002 0.00414 0.0063 0.00296 0.00427 ...\n $ Cash.Current.Liability                                 : num  1.47e-04 1.38e-03 5.34e+09 1.01e-03 6.80e-04 ...\n $ Current.Liability.to.Assets                            : num  0.1473 0.057 0.0982 0.0987 0.1102 ...\n $ Operating.Funds.to.Liability                           : num  0.334 0.341 0.337 0.349 0.345 ...\n $ Inventory.Working.Capital                              : num  0.277 0.29 0.277 0.277 0.288 ...\n $ Inventory.Current.Liability                            : num  0.00104 0.00521 0.01388 0.00354 0.00487 ...\n $ Current.Liabilities.Liability                          : num  0.676 0.309 0.446 0.616 0.975 ...\n $ Working.Capital.Equity                                 : num  0.721 0.732 0.743 0.73 0.732 ...\n $ Current.Liabilities.Equity                             : num  0.339 0.33 0.335 0.332 0.331 ...\n $ Long.term.Liability.to.Current.Assets                  : num  0.02559 0.02395 0.00372 0.02217 0 ...\n $ Retained.Earnings.to.Total.Assets                      : num  0.903 0.931 0.91 0.907 0.914 ...\n $ Total.income.Total.expense                             : num  0.00202 0.00223 0.00206 0.00183 0.00222 ...\n $ Total.expense.Assets                                   : num  0.0649 0.0255 0.0214 0.0242 0.0264 ...\n $ Current.Asset.Turnover.Rate                            : num  7.01e+08 1.07e-04 1.79e-03 8.14e+09 6.68e+09 ...\n $ Quick.Asset.Turnover.Rate                              : num  6.55e+09 7.70e+09 1.02e-03 6.05e+09 5.05e+09 ...\n $ Working.capitcal.Turnover.Rate                         : num  0.594 0.594 0.595 0.594 0.594 ...\n $ Cash.Turnover.Rate                                     : num  4.58e+08 2.49e+09 7.61e+08 2.03e+09 8.24e+08 ...\n $ Cash.Flow.to.Sales                                     : num  0.672 0.672 0.672 0.672 0.672 ...\n $ Fixed.Assets.to.Assets                                 : num  0.424 0.469 0.276 0.559 0.31 ...\n $ Current.Liability.to.Liability                         : num  0.676 0.309 0.446 0.616 0.975 ...\n $ Current.Liability.to.Equity                            : num  0.339 0.33 0.335 0.332 0.331 ...\n $ Equity.to.Long.term.Liability                          : num  0.127 0.121 0.118 0.121 0.111 ...\n $ Cash.Flow.to.Total.Assets                              : num  0.638 0.641 0.643 0.579 0.622 ...\n $ Cash.Flow.to.Liability                                 : num  0.459 0.459 0.459 0.449 0.454 ...\n $ CFO.to.Assets                                          : num  0.52 0.567 0.538 0.604 0.578 ...\n $ Cash.Flow.to.Equity                                    : num  0.313 0.314 0.315 0.302 0.312 ...\n $ Current.Liability.to.Current.Assets                    : num  0.1183 0.0478 0.0253 0.0672 0.0477 ...\n $ Liability.Assets.Flag                                  : int  0 0 0 0 0 0 0 0 0 0 ...\n $ Net.Income.to.Total.Assets                             : num  0.717 0.795 0.775 0.74 0.795 ...\n $ Total.assets.to.GNP.price                              : num  0.00922 0.00832 0.04 0.00325 0.00388 ...\n $ No.credit.Interval                                     : num  0.623 0.624 0.624 0.623 0.624 ...\n $ Gross.Profit.to.Sales                                  : num  0.601 0.61 0.601 0.584 0.599 ...\n $ Net.Income.to.Stockholder.s.Equity                     : num  0.828 0.84 0.837 0.835 0.84 ...\n $ Liability.to.Equity                                    : num  0.29 0.284 0.29 0.282 0.279 ...\n $ Degree.of.Financial.Leverage..DFL.                     : num  0.0266 0.2646 0.0266 0.0267 0.0248 ...\n $ Interest.Coverage.Ratio..Interest.expense.to.EBIT.     : num  0.564 0.57 0.564 0.565 0.576 ...\n $ Net.Income.Flag                                        : int  1 1 1 1 1 1 1 1 1 1 ...\n $ Equity.to.Liability                                    : num  0.0165 0.0208 0.0165 0.024 0.0355 ...\n\n\nThere are three integer variables (1 is the response, 2 are flag values). The rest of the varaiables are numeric.\nNext, we need to check for missing values:\n\n#sum columns values of na\ncolSums(is.na(data))\n\n                                              Bankrupt. \n                                                      0 \nROA.C..before.interest.and.depreciation.before.interest \n                                                      0 \n                 ROA.A..before.interest.and...after.tax \n                                                      0 \n      ROA.B..before.interest.and.depreciation.after.tax \n                                                      0 \n                                 Operating.Gross.Margin \n                                                      0 \n                            Realized.Sales.Gross.Margin \n                                                      0 \n                                  Operating.Profit.Rate \n                                                      0 \n                              Pre.tax.net.Interest.Rate \n                                                      0 \n                            After.tax.net.Interest.Rate \n                                                      0 \n            Non.industry.income.and.expenditure.revenue \n                                                      0 \n                   Continuous.interest.rate..after.tax. \n                                                      0 \n                                 Operating.Expense.Rate \n                                                      0 \n                  Research.and.development.expense.rate \n                                                      0 \n                                         Cash.flow.rate \n                                                      0 \n                    Interest.bearing.debt.interest.rate \n                                                      0 \n                                           Tax.rate..A. \n                                                      0 \n                                Net.Value.Per.Share..B. \n                                                      0 \n                                Net.Value.Per.Share..A. \n                                                      0 \n                                Net.Value.Per.Share..C. \n                                                      0 \n                Persistent.EPS.in.the.Last.Four.Seasons \n                                                      0 \n                                    Cash.Flow.Per.Share \n                                                      0 \n                             Revenue.Per.Share..Yuan... \n                                                      0 \n                    Operating.Profit.Per.Share..Yuan... \n                                                      0 \n               Per.Share.Net.profit.before.tax..Yuan... \n                                                      0 \n                Realized.Sales.Gross.Profit.Growth.Rate \n                                                      0 \n                           Operating.Profit.Growth.Rate \n                                                      0 \n                       After.tax.Net.Profit.Growth.Rate \n                                                      0 \n                         Regular.Net.Profit.Growth.Rate \n                                                      0 \n                      Continuous.Net.Profit.Growth.Rate \n                                                      0 \n                                Total.Asset.Growth.Rate \n                                                      0 \n                                  Net.Value.Growth.Rate \n                                                      0 \n                   Total.Asset.Return.Growth.Rate.Ratio \n                                                      0 \n                                    Cash.Reinvestment.. \n                                                      0 \n                                          Current.Ratio \n                                                      0 \n                                            Quick.Ratio \n                                                      0 \n                                 Interest.Expense.Ratio \n                                                      0 \n                             Total.debt.Total.net.worth \n                                                      0 \n                                           Debt.ratio.. \n                                                      0 \n                                       Net.worth.Assets \n                                                      0 \n                   Long.term.fund.suitability.ratio..A. \n                                                      0 \n                                   Borrowing.dependency \n                                                      0 \n                       Contingent.liabilities.Net.worth \n                                                      0 \n                       Operating.profit.Paid.in.capital \n                                                      0 \n                  Net.profit.before.tax.Paid.in.capital \n                                                      0 \n            Inventory.and.accounts.receivable.Net.value \n                                                      0 \n                                   Total.Asset.Turnover \n                                                      0 \n                           Accounts.Receivable.Turnover \n                                                      0 \n                                Average.Collection.Days \n                                                      0 \n                        Inventory.Turnover.Rate..times. \n                                                      0 \n                        Fixed.Assets.Turnover.Frequency \n                                                      0 \n                        Net.Worth.Turnover.Rate..times. \n                                                      0 \n                                     Revenue.per.person \n                                                      0 \n                            Operating.profit.per.person \n                                                      0 \n                             Allocation.rate.per.person \n                                                      0 \n                        Working.Capital.to.Total.Assets \n                                                      0 \n                              Quick.Assets.Total.Assets \n                                                      0 \n                            Current.Assets.Total.Assets \n                                                      0 \n                                      Cash.Total.Assets \n                                                      0 \n                         Quick.Assets.Current.Liability \n                                                      0 \n                                 Cash.Current.Liability \n                                                      0 \n                            Current.Liability.to.Assets \n                                                      0 \n                           Operating.Funds.to.Liability \n                                                      0 \n                              Inventory.Working.Capital \n                                                      0 \n                            Inventory.Current.Liability \n                                                      0 \n                          Current.Liabilities.Liability \n                                                      0 \n                                 Working.Capital.Equity \n                                                      0 \n                             Current.Liabilities.Equity \n                                                      0 \n                  Long.term.Liability.to.Current.Assets \n                                                      0 \n                      Retained.Earnings.to.Total.Assets \n                                                      0 \n                             Total.income.Total.expense \n                                                      0 \n                                   Total.expense.Assets \n                                                      0 \n                            Current.Asset.Turnover.Rate \n                                                      0 \n                              Quick.Asset.Turnover.Rate \n                                                      0 \n                         Working.capitcal.Turnover.Rate \n                                                      0 \n                                     Cash.Turnover.Rate \n                                                      0 \n                                     Cash.Flow.to.Sales \n                                                      0 \n                                 Fixed.Assets.to.Assets \n                                                      0 \n                         Current.Liability.to.Liability \n                                                      0 \n                            Current.Liability.to.Equity \n                                                      0 \n                          Equity.to.Long.term.Liability \n                                                      0 \n                              Cash.Flow.to.Total.Assets \n                                                      0 \n                                 Cash.Flow.to.Liability \n                                                      0 \n                                          CFO.to.Assets \n                                                      0 \n                                    Cash.Flow.to.Equity \n                                                      0 \n                    Current.Liability.to.Current.Assets \n                                                      0 \n                                  Liability.Assets.Flag \n                                                      0 \n                             Net.Income.to.Total.Assets \n                                                      0 \n                              Total.assets.to.GNP.price \n                                                      0 \n                                     No.credit.Interval \n                                                      0 \n                                  Gross.Profit.to.Sales \n                                                      0 \n                     Net.Income.to.Stockholder.s.Equity \n                                                      0 \n                                    Liability.to.Equity \n                                                      0 \n                     Degree.of.Financial.Leverage..DFL. \n                                                      0 \n     Interest.Coverage.Ratio..Interest.expense.to.EBIT. \n                                                      0 \n                                        Net.Income.Flag \n                                                      0 \n                                    Equity.to.Liability \n                                                      0 \n\n\nThere is no missing data. This matches the description of the dataset from the source.\nThese variable names are long and difficult to read. Next, let’s rename the variables for ease of use further downstream.\n\n#move names out to csv for easier human readable format and to create new vector of names\nd &lt;- as.data.frame(names(data))\nwrite_csv(d, \"names.csv\")\n\nSince the output is difficult to read, I moved the variables to a csv file and opened in excel to look through the named variables and decide on what to call them. I’ve mapped these new names to the existing variables below using the Tidyverse. I’ve also coerced the integer variables to factors.\n\n#use rename() to rename variables\n#create list of variables to coerce to fctr\nfactors &lt;- c(\"bankrupt\", \"liabAstsFlag\", \"netIncFlag\")\n\n#rename the variables\ndata1 &lt;- data |&gt;\n  rename(\n    \"bankrupt\" =    \"Bankrupt.\",\n    \"roaC\" =    \"ROA.C..before.interest.and.depreciation.before.interest\",\n    \"roaA\" =    \"ROA.A..before.interest.and...after.tax\",\n    \"roaB\" =    \"ROA.B..before.interest.and.depreciation.after.tax\",\n    \"opGrsMargin\" = \"Operating.Gross.Margin\",\n    \"realSlsGrsMargin\" =    \"Realized.Sales.Gross.Margin\",\n    \"opPrftRate\" =  \"Operating.Profit.Rate\",\n    \"pTaxNetInt\" =  \"Pre.tax.net.Interest.Rate\",\n    \"aTaxNetInt\" =  \"After.tax.net.Interest.Rate\",\n    \"nonIndRevenue\" =   \"Non.industry.income.and.expenditure.revenue\",\n    \"contIntATax\" = \"Continuous.interest.rate..after.tax.\",\n    \"opExpRate\" =   \"Operating.Expense.Rate\",\n    \"rndExpRate\" =  \"Research.and.development.expense.rate\",\n    \"cashFlRate\" =  \"Cash.flow.rate\",\n    \"intBearDbtInt\" =   \"Interest.bearing.debt.interest.rate\",\n    \"taxRateA\" =    \"Tax.rate..A.\",\n    \"nvpsB\" =   \"Net.Value.Per.Share..B.\",\n    \"nvpsA\" =   \"Net.Value.Per.Share..A.\",\n    \"nvpsC\" =   \"Net.Value.Per.Share..C.\",\n    \"pEPSl4S\" = \"Persistent.EPS.in.the.Last.Four.Seasons\",\n    \"cfps\" =    \"Cash.Flow.Per.Share\",\n    \"rpsYuan\" = \"Revenue.Per.Share..Yuan...\",\n    \"opPrftps\" =    \"Operating.Profit.Per.Share..Yuan...\",\n    \"psNetPftbTax\" =    \"Per.Share.Net.profit.before.tax..Yuan...\",\n    \"realSlsGrsPrftgRate\" = \"Realized.Sales.Gross.Profit.Growth.Rate\",\n    \"OpPrftgRate\" = \"Operating.Profit.Growth.Rate\",\n    \"aTaxNetPrftgRate\" =    \"After.tax.Net.Profit.Growth.Rate\",\n    \"regNetPrftgRate\" = \"Regular.Net.Profit.Growth.Rate\",\n    \"contNetPrftgRate\" =    \"Continuous.Net.Profit.Growth.Rate\",\n    \"totAstgRate\" = \"Total.Asset.Growth.Rate\",\n    \"netValgRate\" = \"Net.Value.Growth.Rate\",\n    \"totAstRetGRRatio\" =    \"Total.Asset.Return.Growth.Rate.Ratio\",\n    \"cashReinvest\" =    \"Cash.Reinvestment..\",\n    \"curRatio\" =    \"Current.Ratio\",\n    \"quickRatio\" =  \"Quick.Ratio\",\n    \"intExpRatio\" = \"Interest.Expense.Ratio\",\n    \"totDetTotNetWrth\" =    \"Total.debt.Total.net.worth\",\n    \"detRatio\" =    \"Debt.ratio..\",\n    \"netWrtAst\" =   \"Net.worth.Assets\",\n    \"ltFundSuitRatioA\" =    \"Long.term.fund.suitability.ratio..A.\",\n    \"borDepend\" =   \"Borrowing.dependency\",\n    \"contLiabNetWorth\" =    \"Contingent.liabilities.Net.worth\",\n    \"opPrftPaidCap\" =   \"Operating.profit.Paid.in.capital\",\n    \"netPrftBTaxPaidCap\" =  \"Net.profit.before.tax.Paid.in.capital\",\n    \"invtryAcctRecvNValue\" =    \"Inventory.and.accounts.receivable.Net.value\",\n    \"totAstTurnover\" =  \"Total.Asset.Turnover\",\n    \"acctRecTurnover\" = \"Accounts.Receivable.Turnover\",\n    \"avgColctDays\" =    \"Average.Collection.Days\",\n    \"invtryTurnoverRateX\" = \"Inventory.Turnover.Rate..times.\",\n    \"fixAstsTurnoverFreq\" = \"Fixed.Assets.Turnover.Frequency\",\n    \"netWrtTurnoverRateX\" = \"Net.Worth.Turnover.Rate..times.\",\n    \"revPerPerson\" =    \"Revenue.per.person\",\n    \"opPrftPerson\" =    \"Operating.profit.per.person\",\n    \"allRatePerson\" =   \"Allocation.rate.per.person\",\n    \"wrkCapTotAsts\" =   \"Working.Capital.to.Total.Assets\",\n    \"qckAstsTotAsts\" =  \"Quick.Assets.Total.Assets\",\n    \"curAstsTotAsts\" =  \"Current.Assets.Total.Assets\",\n    \"cashTotAsts\" = \"Cash.Total.Assets\",\n    \"qckAstsCurLiab\" =  \"Quick.Assets.Current.Liability\",\n    \"cashCurLiab\" = \"Cash.Current.Liability\",\n    \"curLiabToAsts\" =   \"Current.Liability.to.Assets\",\n    \"opFundToLiab\" =    \"Operating.Funds.to.Liability\",\n    \"invWrkCap\" =   \"Inventory.Working.Capital\",\n    \"invCurLiab\" =  \"Inventory.Current.Liability\",\n    \"curLiabLiab\" = \"Current.Liabilities.Liability\",\n    \"wrkCapEq\" =    \"Working.Capital.Equity\",\n    \"curLiabEq\" =   \"Current.Liabilities.Equity\",\n    \"ltLiabToCurAsts\" = \"Long.term.Liability.to.Current.Assets\",\n    \"retEarnToTotAsts\" =    \"Retained.Earnings.to.Total.Assets\",\n    \"totIncTotExp\" =    \"Total.income.Total.expense\",\n    \"totExpAsts\" =  \"Total.expense.Assets\",\n    \"curAstTurnoverRate\" =  \"Current.Asset.Turnover.Rate\",\n    \"qckAstTurnoverRate\" =  \"Quick.Asset.Turnover.Rate\",\n    \"wrkCapTurnoverRate\" =  \"Working.capitcal.Turnover.Rate\",\n    \"cashTurnoverRate\" =    \"Cash.Turnover.Rate\",\n    \"cashFlwToSales\" =  \"Cash.Flow.to.Sales\",\n    \"fixAstsToLiab\" =   \"Fixed.Assets.to.Assets\",\n    \"curLiabtToLiab\" =  \"Current.Liability.to.Liability\",\n    \"curLiabToEq\" = \"Current.Liability.to.Equity\",\n    \"EqToltLiab\" =  \"Equity.to.Long.term.Liability\",\n    \"cashFlwtToTotAsts\" =   \"Cash.Flow.to.Total.Assets\",\n    \"cashFlwToLiab\" =   \"Cash.Flow.to.Liability\",\n    \"CFOtoAsts\" =   \"CFO.to.Assets\",\n    \"cashFlwToEq\" = \"Cash.Flow.to.Equity\",\n    \"curLiabToCurAsts\" =    \"Current.Liability.to.Current.Assets\",\n    \"liabAstsFlag\" =    \"Liability.Assets.Flag\",\n    \"netIncToTotAsts\" = \"Net.Income.to.Total.Assets\",\n    \"totAstsToGNPPrice\" =   \"Total.assets.to.GNP.price\",\n    \"noCredInt\" =   \"No.credit.Interval\",\n    \"grsPrftToSales\" =  \"Gross.Profit.to.Sales\",\n    \"netIncToStkhldrEq\" =   \"Net.Income.to.Stockholder.s.Equity\",\n    \"liabToEq\" =    \"Liability.to.Equity\",\n    \"DFL\" = \"Degree.of.Financial.Leverage..DFL.\",\n    \"intCovRatioIntExpToEBIT\" = \"Interest.Coverage.Ratio..Interest.expense.to.EBIT.\",\n    \"netIncFlag\" =  \"Net.Income.Flag\",\n    \"eqToLiab\" =    \"Equity.to.Liability\"\n  ) |&gt;\n  mutate_at(factors, factor)\n\n\n#I used this code chunk to check the output from above, but it is large and messy and hard to read.  I've silenced this code for publication.\n#str(data1)\n\nNow, let’s check to see if the factor variables make sense:\n\n#check for unique values in the flag variables\nua &lt;- unique(data1$liabAstsFlag)\nub &lt;- unique(data1$netIncFlag)\n\nuab &lt;- rbind(ua, ub)\nuab\n\n   [,1] [,2]\nua    1    2\nub    1    1\n\n\nA value of 1 in all rows of netIncFlag does not add any value, we’ll remove this from the table.\n\ndata2 &lt;- data1 |&gt;\n  select(-\"netIncFlag\")\nnames(data2)\n\n [1] \"bankrupt\"                \"roaC\"                   \n [3] \"roaA\"                    \"roaB\"                   \n [5] \"opGrsMargin\"             \"realSlsGrsMargin\"       \n [7] \"opPrftRate\"              \"pTaxNetInt\"             \n [9] \"aTaxNetInt\"              \"nonIndRevenue\"          \n[11] \"contIntATax\"             \"opExpRate\"              \n[13] \"rndExpRate\"              \"cashFlRate\"             \n[15] \"intBearDbtInt\"           \"taxRateA\"               \n[17] \"nvpsB\"                   \"nvpsA\"                  \n[19] \"nvpsC\"                   \"pEPSl4S\"                \n[21] \"cfps\"                    \"rpsYuan\"                \n[23] \"opPrftps\"                \"psNetPftbTax\"           \n[25] \"realSlsGrsPrftgRate\"     \"OpPrftgRate\"            \n[27] \"aTaxNetPrftgRate\"        \"regNetPrftgRate\"        \n[29] \"contNetPrftgRate\"        \"totAstgRate\"            \n[31] \"netValgRate\"             \"totAstRetGRRatio\"       \n[33] \"cashReinvest\"            \"curRatio\"               \n[35] \"quickRatio\"              \"intExpRatio\"            \n[37] \"totDetTotNetWrth\"        \"detRatio\"               \n[39] \"netWrtAst\"               \"ltFundSuitRatioA\"       \n[41] \"borDepend\"               \"contLiabNetWorth\"       \n[43] \"opPrftPaidCap\"           \"netPrftBTaxPaidCap\"     \n[45] \"invtryAcctRecvNValue\"    \"totAstTurnover\"         \n[47] \"acctRecTurnover\"         \"avgColctDays\"           \n[49] \"invtryTurnoverRateX\"     \"fixAstsTurnoverFreq\"    \n[51] \"netWrtTurnoverRateX\"     \"revPerPerson\"           \n[53] \"opPrftPerson\"            \"allRatePerson\"          \n[55] \"wrkCapTotAsts\"           \"qckAstsTotAsts\"         \n[57] \"curAstsTotAsts\"          \"cashTotAsts\"            \n[59] \"qckAstsCurLiab\"          \"cashCurLiab\"            \n[61] \"curLiabToAsts\"           \"opFundToLiab\"           \n[63] \"invWrkCap\"               \"invCurLiab\"             \n[65] \"curLiabLiab\"             \"wrkCapEq\"               \n[67] \"curLiabEq\"               \"ltLiabToCurAsts\"        \n[69] \"retEarnToTotAsts\"        \"totIncTotExp\"           \n[71] \"totExpAsts\"              \"curAstTurnoverRate\"     \n[73] \"qckAstTurnoverRate\"      \"wrkCapTurnoverRate\"     \n[75] \"cashTurnoverRate\"        \"cashFlwToSales\"         \n[77] \"fixAstsToLiab\"           \"curLiabtToLiab\"         \n[79] \"curLiabToEq\"             \"EqToltLiab\"             \n[81] \"cashFlwtToTotAsts\"       \"cashFlwToLiab\"          \n[83] \"CFOtoAsts\"               \"cashFlwToEq\"            \n[85] \"curLiabToCurAsts\"        \"liabAstsFlag\"           \n[87] \"netIncToTotAsts\"         \"totAstsToGNPPrice\"      \n[89] \"noCredInt\"               \"grsPrftToSales\"         \n[91] \"netIncToStkhldrEq\"       \"liabToEq\"               \n[93] \"DFL\"                     \"intCovRatioIntExpToEBIT\"\n[95] \"eqToLiab\"               \n\n\nDuring initial evaluation of potential dataset to use for this project, I briefly tried to model the Taiwanese Bankruptcy Prediction dataset using a logistic regression model and it did not converge. We’ll reproduce that here:\n\n#quick test fit using all variables with logistic regression model\nlogitMod &lt;- glm(bankrupt ~ ., data = data2, family=binomial())\n\nWarning: glm.fit: algorithm did not converge\n\n\nWarning: glm.fit: fitted probabilities numerically 0 or 1 occurred\n\n\nThis is the same warning I got in my original evaluation of the datasets, “algoritm did not converge”. This may be due to collinearity between the myriad variables. We can evaluate correlation of the variables below.\n\n#create data frame of numeric values without the factors for evaluation of correlation\nnumData &lt;- data2 |&gt;\n  select(where(is.numeric))\nfullCorr &lt;- (cor(numData))\nlongCorr &lt;- cor_gather(fullCorr)\n#sort and filter correlation \nlongCorr1 &lt;- longCorr |&gt;\n  arrange(desc(cor)) |&gt;\n  filter(cor &lt; 1 & cor &gt; 0.7)\n  \nlongCorr1\n\n# A tibble: 140 × 3\n   var1             var2               cor\n   &lt;chr&gt;            &lt;chr&gt;            &lt;dbl&gt;\n 1 curLiabtToLiab   curLiabLiab       1   \n 2 curLiabToEq      curLiabEq         1   \n 3 curLiabLiab      curLiabtToLiab    1   \n 4 curLiabEq        curLiabToEq       1   \n 5 grsPrftToSales   opGrsMargin       1.00\n 6 opGrsMargin      grsPrftToSales    1.00\n 7 nvpsC            nvpsA             1.00\n 8 nvpsA            nvpsC             1.00\n 9 realSlsGrsMargin opGrsMargin       1.00\n10 opGrsMargin      realSlsGrsMargin  1.00\n# ℹ 130 more rows\n\n\nI’ve tabled correlation for values less than 1.0, which would be self correlation (diagonal values), and arbitrarily set correlation to be greater than 0.7 for visualization. This will create a range of correlation values where we can at least evalute the variables and see if it is clear that they may be a linear combination of a correlated variable. Correlation between some variables that contain the same terms (eg. Liability, Gross Margin), seem to be strongly correlated. It makes sense that these could possibly be linear combinations of each other.\nBelow is a visual demonstration of Principal Components Analysis output. The numeric data are centered and scaled, and each feature’s contribution to overall variations in the dataset are determined. The proportion of the variability explained can be used to reduce the dimensionality. We will use this concept in the kNN model training.\n\n#evaluate principal components\npca &lt;- prcomp(numData, center=TRUE, scale.=TRUE)\n\nPlot the Proportion of Variance Explained by Principal Components\n\n#square the sd and sum the vars to generate variance proportion attributable to each feature variable\npcaData &lt;- data.frame(\n  Component = 1:length(pca$sdev),\n  Variance = pca$sdev^2/sum(pca$sdev^2)\n)\n#plot scree plot\nggplot(pcaData, aes(x=Component, y=Variance)) +\n  geom_bar(stat = \"identity\", fill=\"red\") +\n  geom_line() +\n  xlab(\"Principle Components\") +\n  ylab(\"Proportion of Variance Explained\") +\n  ggtitle(\"PCA Scree Plot\")\n\n\n\n\n\n\n\n\nThis plot shows the proportion of the variability explained by the components ~70 and above are visually imperceptible.\n\n\nCreation of Training and Test Splits\nFirst we’ll create a training and test split with 70% of the data in the training dataset and 30% in the test dataset.\n\n#set seed for reproducibility and create 70/30 split\nset.seed(10)\ntrain_index &lt;- createDataPartition(data2$bankrupt, p=0.7, list=FALSE)\nbankrupt_train &lt;- data2[train_index, ]\nbankrupt_test &lt;- data2[-train_index, ]\nhead(bankrupt_train)\n\n   bankrupt      roaC      roaA      roaB opGrsMargin realSlsGrsMargin\n1         1 0.3705943 0.4243894 0.4057498   0.6014572        0.6014572\n4         1 0.3998440 0.4512647 0.4577333   0.5835411        0.5835411\n5         1 0.4650222 0.5384322 0.5222978   0.5987835        0.5987835\n7         0 0.3909228 0.4457043 0.4361583   0.6199498        0.6199498\n11        0 0.4824745 0.5675425 0.5381980   0.6140259        0.6140259\n12        0 0.4444011 0.5497165 0.4989560   0.6237118        0.6237118\n   opPrftRate pTaxNetInt aTaxNetInt nonIndRevenue contIntATax    opExpRate\n1   0.9989692  0.7968871  0.8088094     0.3026464   0.7809849 1.256969e-04\n4   0.9986997  0.7969670  0.8089656     0.3033495   0.7812410 1.078888e-04\n5   0.9989731  0.7973661  0.8093037     0.3034750   0.7815500 7.890000e+09\n7   0.9989931  0.7970119  0.8089604     0.3028144   0.7811801 3.984834e-04\n11  0.9989784  0.7975350  0.8094597     0.3037590   0.7816295 3.181160e-04\n12  0.9989753  0.7974429  0.8093891     0.3036045   0.7813732 4.766536e-04\n   rndExpRate cashFlRate intBearDbtInt taxRateA     nvpsB     nvpsA     nvpsC\n1    0.00e+00  0.4581431  0.0007250725        0 0.1479499 0.1479499 0.1479499\n4    0.00e+00  0.4657054  0.0004490449        0 0.1541865 0.1541865 0.1541865\n5    0.00e+00  0.4627463  0.0006860686        0 0.1675024 0.1675024 0.1675024\n7    7.30e+08  0.4610201  0.0008050805        0 0.1588218 0.1588218 0.1588218\n11   1.90e+09  0.4648180  0.0005490549        0 0.1829253 0.1829253 0.1829253\n12   1.21e+09  0.4654907  0.0007030703        0 0.1738654 0.1738654 0.1738654\n     pEPSl4S      cfps    rpsYuan   opPrftps psNetPftbTax realSlsGrsPrftgRate\n1  0.1691406 0.3116644 0.01755978 0.09592053    0.1387362          0.02210228\n4  0.1937222 0.3216736 0.01436847 0.07776240    0.1486028          0.02204607\n5  0.2125366 0.3191625 0.02968979 0.09689765    0.1684115          0.02209591\n7  0.1614825 0.3166867 0.03091489 0.09991043    0.1289448          0.02211225\n11 0.2189657 0.3191625 0.01553307 0.09649051    0.1785795          0.02210696\n12 0.2046894 0.3198698 0.01141915 0.09600195    0.1724787          0.02205068\n   OpPrftgRate aTaxNetPrftgRate regNetPrftgRate contNetPrftgRate totAstgRate\n1    0.8481950        0.6889795       0.6889795        0.2175354    4.98e+09\n4    0.8480055        0.6891095       0.6891095        0.2175682    4.88e+09\n5    0.8482582        0.6896969       0.6896969        0.2176256    5.51e+09\n7    0.8483225        0.6885899       0.6885899        0.2176045    5.72e+09\n11   0.8482382        0.6893597       0.6893597        0.2175802    7.47e+08\n12   0.8479371        0.6893520       0.6893520        0.2172966    5.73e+09\n    netValgRate totAstRetGRRatio cashReinvest    curRatio  quickRatio\n1  0.0003269773        0.2631000    0.3637253 0.002258963 0.001207755\n4  0.0003824259        0.2633712    0.3840766 0.004194059 0.002896491\n5  0.0004389476        0.2652182    0.3796897 0.006022446 0.003727447\n7  0.0003517570        0.2630324    0.3753027 0.004672060 0.002869042\n11 0.0004485550        0.2639011    0.3742782 0.006097329 0.003449214\n12 0.0004550681        0.2639128    0.3799411 0.008628990 0.005122978\n   intExpRatio totDetTotNetWrth   detRatio netWrtAst ltFundSuitRatioA borDepend\n1    0.6299513      0.021265924 0.20757626 0.7924237      0.005024455 0.3902844\n4    0.6302284      0.009572402 0.15146476 0.8485352      0.005046924 0.3797427\n5    0.6360550      0.005149600 0.10650905 0.8934909      0.005303319 0.3750254\n7    0.6299879      0.024441222 0.21610182 0.7838982      0.005005044 0.3849990\n11   0.6312369      0.004932564 0.10357650 0.8964235      0.005810576 0.3741800\n12   0.6320958      0.004292397 0.09438583 0.9056142      0.005414220 0.3731130\n   contLiabNetWorth opPrftPaidCap netPrftBTaxPaidCap invtryAcctRecvNValue\n1       0.006478502    0.09588483          0.1377573            0.3980357\n4       0.005365848    0.07772729          0.1475605            0.3979245\n5       0.006623525    0.09692706          0.1674610            0.4000788\n7       0.008043897    0.09986646          0.1279391            0.4005745\n11      0.008129814    0.09647109          0.1776110            0.3956617\n12      0.006969021    0.09596626          0.1715255            0.3972278\n   totAstTurnover acctRecTurnover avgColctDays invtryTurnoverRateX\n1      0.08695652    0.0018138841  0.003487364        1.820926e-04\n4      0.08995502    0.0019660556  0.003214967        7.130000e+09\n5      0.17541229    0.0014486726  0.004366891        1.633674e-04\n7      0.10044978    0.0016617126  0.003805018        1.620299e-04\n11     0.07646177    0.0019396792  0.003258517        1.562977e-04\n12     0.06296852    0.0008075234  0.007838031        6.550000e+08\n   fixAstsTurnoverFreq netWrtTurnoverRateX revPerPerson opPrftPerson\n1         1.165007e-04          0.03290323   0.03416418    0.3929129\n4         9.150000e+09          0.02806452   0.01546348    0.3784966\n5         2.935211e-04          0.04016129   0.05811142    0.3943715\n7         1.452476e-04          0.04080645   0.01145954    0.3931729\n11        1.747510e-04          0.02112903   0.01389480    0.3927546\n12        1.066662e-04          0.01967742   0.01042551    0.3924380\n   allRatePerson wrkCapTotAsts qckAstsTotAsts curAstsTotAsts cashTotAsts\n1    0.037135302     0.6727753     0.16667296      0.1906430 0.004094406\n4    0.021319990     0.7257542     0.16157453      0.2258149 0.018850625\n5    0.023988212     0.7518225     0.26032988      0.3583802 0.014160974\n7    0.009703141     0.7294165     0.25509317      0.2952210 0.022988598\n11   0.010748686     0.7512043     0.05990057      0.1017452 0.002056836\n12   0.012858373     0.7691139     0.14001811      0.2189426 0.020542229\n   qckAstsCurLiab  cashCurLiab curLiabToAsts opFundToLiab invWrkCap  invCurLiab\n1     0.001996771 0.0001473360    0.14730845    0.3340152 0.2769202 0.001035990\n4     0.002961238 0.0010106464    0.09871463    0.3487164 0.2765803 0.003540148\n5     0.004274771 0.0006804636    0.11019485    0.3446388 0.2879127 0.004868570\n7     0.003973830 0.0010503118    0.11592041    0.3400805 0.2766433 0.002159349\n11    0.003626043 0.0003358965    0.03208680    0.3436799 0.2851007 0.006735041\n12    0.005415676 0.0022537355    0.04799481    0.3465566 0.2775985 0.008649940\n   curLiabLiab  wrkCapEq curLiabEq ltLiabToCurAsts retEarnToTotAsts\n1    0.6762692 0.7212746 0.3390770     0.025592368        0.9032248\n4    0.6158484 0.7298249 0.3315090     0.022165200        0.9069022\n5    0.9750066 0.7319996 0.3307263     0.000000000        0.9138502\n7    0.5080888 0.7287308 0.3373920     0.009347426        0.9114414\n11   0.2831941 0.7319590 0.3274847     0.064126528        0.9428290\n12   0.4710284 0.7330453 0.3280420     0.017846406        0.9329552\n   totIncTotExp totExpAsts curAstTurnoverRate qckAstTurnoverRate\n1   0.002021613 0.06485571       7.010000e+08           6.55e+09\n4   0.001831359 0.02416107       8.140000e+09           6.05e+09\n5   0.002223930 0.02638525       6.680000e+09           5.05e+09\n7   0.002120736 0.09280231       1.058011e-04           9.56e+09\n11  0.002337657 0.02880240       4.760000e+09           2.92e+09\n12  0.002256752 0.05695228       1.276006e-04           8.36e+09\n   wrkCapTurnoverRate cashTurnoverRate cashFlwToSales fixAstsToLiab\n1           0.5938305         4.58e+08      0.6715677     0.4242058\n4           0.5938888         2.03e+09      0.6715192     0.5591440\n5           0.5939153         8.24e+08      0.6715631     0.3095549\n7           0.5938934         2.39e+09      0.6715623     0.3558538\n11          0.5939156         3.08e+08      0.6715723     0.2254907\n12          0.5939441         3.37e+08      0.6715744     0.3283762\n   curLiabtToLiab curLiabToEq EqToltLiab cashFlwtToTotAsts cashFlwToLiab\n1       0.6762692   0.3390770  0.1265495         0.6375554     0.4586091\n4       0.6158484   0.3315090  0.1207605         0.5790393     0.4485179\n5       0.9750066   0.3307263  0.1109332         0.6223741     0.4544109\n7       0.5080888   0.3373920  0.1205614         0.6304191     0.4577854\n11      0.2831941   0.3274847  0.1209426         0.6429500     0.4592795\n12      0.4710284   0.3280420  0.1164586         0.6445698     0.4597103\n   CFOtoAsts cashFlwToEq curLiabToCurAsts liabAstsFlag netIncToTotAsts\n1  0.5203819   0.3129049       0.11825048            0       0.7168453\n4  0.6041051   0.3023823       0.06724962            0       0.7395545\n5  0.5784689   0.3115672       0.04772537            0       0.7950159\n7  0.5606530   0.3102964       0.06076512            0       0.7366191\n11 0.5748457   0.3145692       0.04716635            0       0.8141106\n12 0.5829027   0.3147913       0.03371160            0       0.8048870\n   totAstsToGNPPrice noCredInt grsPrftToSales netIncToStkhldrEq  liabToEq\n1        0.009219440 0.6228790      0.6014533         0.8278902 0.2902019\n4        0.003252475 0.6229287      0.5835376         0.8346971 0.2817212\n5        0.003877563 0.6235207      0.5987815         0.8399727 0.2785138\n7        0.018371872 0.6236554      0.6199489         0.8299798 0.2925041\n11       0.076972257 0.6236872      0.6140212         0.8413371 0.2783564\n12       0.007317881 0.6237236      0.6237092         0.8406497 0.2778921\n          DFL intCovRatioIntExpToEBIT   eqToLiab\n1  0.02660063               0.5640501 0.01646874\n4  0.02669663               0.5646634 0.02398233\n5  0.02475185               0.5756166 0.03549020\n7  0.02662230               0.5642001 0.01566307\n11 0.02697109               0.5658915 0.03657169\n12 0.02739086               0.5669826 0.04038102\n\n\n\n\nk-Nearest Neighbors\nLet’s try KNN first to see if that model will work with this many variables. The k-Nearest Neighbors (kNN) model is a non-parametric model that uses the tuning parameter k to evaluate each k-nearest values. In the case of classification tasks (which is what we are doing here), for each value of k, the majority of the k-nearest values determines the class (bankrupt or not). For example, with k=1, each observation determines the class of itself. If k=3, then if 2 of the observations are class=0 and 1 observation is class=1, then the majority rule is that that combination of predictors will be classified as class=0. This model does not perform variable selection, and we have included Principle Components Analysis (PCA) as a preprocessing step in the model training below, which does perform variable shrinkage. This is necessary due to the highly correlated nature of this dataset.\nFor the purposes of using PCA, we will center and scale the data. This is not strictly necessary if we are using kNN modeling without PCA.\nWe will tune the optimal value of the tuning parameter (k) based on the training accuracy.\n\n#set seed for cv fold generation\nset.seed(10)\n#create grid for evaluating k\nkgrid &lt;- expand.grid(k=seq(1,50, by=1))\n#create knn model with 10 fold cv\nknnMod &lt;- train(bankrupt ~ .,\n              data = bankrupt_train,\n              method = \"knn\",\n              tuneGrid = kgrid,\n              preProcess = c(\"center\", \"scale\", \"pca\"),\n              trControl = trainControl(method = \"CV\",\n                                      number = 10,\n                                      ))\nknnMod$bestTune\n\n    k\n10 10\n\n\nThis looks like the best training accuracy is for k=10.\nLet’s show this visually:\n\n#plot training accuracy by tuning parameter\nplot(knnMod)\n\n\n\n\n\n\n\n\nWe’ll also calculate the NIR (no information rate), which is just the proportion of the observations that fall in the most prevalent category. The model above should perform better than the NIR, or it is of no value.\n\n#create table of class proportions in training dataset for calculation of NIR.\ntrainClassProp &lt;- table(bankrupt_train$bankrupt)\ntrainClassProp\n\n\n   0    1 \n4620  154 \n\n#dim(trainClassProp)\n\nThe most prevalent class is non-bankrupt company (this should be true in the training and test sets, since we split the data to have balanced proporations of the dependent variable, bankrupt.)\n\n#training NIR\nNIRknnTrain &lt;- (trainClassProp[1]/nrow(bankrupt_train))\nNIRknnTrain\n\n        0 \n0.9677419 \n\n\nThe NIR for the kNN model is 0.9677419. The accuracy of the best tuned kNN model is 0.9694188. This is not a large improvement in training accuracy. We’ll see later if the test accuracy changes.\nWe’ll predict with the best kNN model on the entire training dataset.\n\n#use predict() to evaluate model on training dataset\nknnTrain &lt;- predict(knnMod, newdata = bankrupt_train)\npostResample(knnTrain, obs = bankrupt_train$bankrupt)\n\n Accuracy     Kappa \n0.9710934 0.2719537 \n\nknnConf &lt;-confusionMatrix(knnTrain, bankrupt_train$bankrupt)\nknnConf\n\nConfusion Matrix and Statistics\n\n          Reference\nPrediction    0    1\n         0 4609  127\n         1   11   27\n                                          \n               Accuracy : 0.9711          \n                 95% CI : (0.9659, 0.9757)\n    No Information Rate : 0.9677          \n    P-Value [Acc &gt; NIR] : 0.1006          \n                                          \n                  Kappa : 0.272           \n                                          \n Mcnemar's Test P-Value : &lt;2e-16          \n                                          \n            Sensitivity : 0.9976          \n            Specificity : 0.1753          \n         Pos Pred Value : 0.9732          \n         Neg Pred Value : 0.7105          \n             Prevalence : 0.9677          \n         Detection Rate : 0.9654          \n   Detection Prevalence : 0.9920          \n      Balanced Accuracy : 0.5865          \n                                          \n       'Positive' Class : 0               \n                                          \n\n\nThe training accuracy of the tuned model is not significantly different than the NIR at the alpha=0.05 confidence level.\n\n\nRegularized Logistic Regression Model (Elastic Net)\nThe next model we will evaluate will be the Elastic Net model, using a logic link function since the dependent variable is a binary classifier and takes on the values 0 or 1. The elastic net combines both the L1 and L2 penalties. The L1 penalty is the absolute value of the sum of the coefficient estimates, and the L2 penalty is the sum of the squared coefficient estimates. This is a parametric model that estimates the parameters that minimizes the logistic regression model subject to both the L1 and L2 penatly. There are also two tuning parameters, alpha and lambda. This is a combination of both LASSO and Ridge regression and deals with highly correlated data better than either alone. This is why I picked Elastic Net here, since we have shown above that there is a lot of correlation between predictors in the Taiwanese Bankruptcy Prediction dataset.\nThis model performs variable selection and can be used for inference, as there are estimated coefficients for which confidence intervals can be calculated. We will need to standardize the predictors for this model\nWe’ll start by building a tuning grid for both all combinations of Alpha and Lambda that we want to evaluate:\n\n#create tuning grid for Elastic Net\nalpha &lt;- seq(from = 0, to = 1, by = 0.05)\nlambda &lt;- seq(from = 0.005, to = 0.1, by = 0.005)\nnetTuneGrid &lt;- expand.grid(alpha, lambda)\nnames(netTuneGrid) &lt;- c(\"alpha\", \"lambda\")\nhead(netTuneGrid)\n\n  alpha lambda\n1  0.00  0.005\n2  0.05  0.005\n3  0.10  0.005\n4  0.15  0.005\n5  0.20  0.005\n6  0.25  0.005\n\n\nNext, we’ll perform 10-fold cross validation on the training data using the caret workflow and glmnet() model family.\n\nset.seed(10)\n#train elastic net model\nnetMod &lt;- train(bankrupt ~ ., data = bankrupt_train,\n                 method = \"glmnet\",\n                 family = \"binomial\",\n                 preProcess = c(\"center\", \"scale\"),\n                 tuneGrid = netTuneGrid,\n                 trControl = trainControl(method = \"cv\", \n                                          number = 10))\n\nWarning: from glmnet C++ code (error code -98); Convergence for 98th lambda\nvalue not reached after maxit=100000 iterations; solutions for larger lambdas\nreturned\n\n\nWarning: from glmnet C++ code (error code -86); Convergence for 86th lambda\nvalue not reached after maxit=100000 iterations; solutions for larger lambdas\nreturned\n\n\nWarning: from glmnet C++ code (error code -88); Convergence for 88th lambda\nvalue not reached after maxit=100000 iterations; solutions for larger lambdas\nreturned\n\n\nWarning: from glmnet C++ code (error code -95); Convergence for 95th lambda\nvalue not reached after maxit=100000 iterations; solutions for larger lambdas\nreturned\n\n\nWarning: from glmnet C++ code (error code -93); Convergence for 93th lambda\nvalue not reached after maxit=100000 iterations; solutions for larger lambdas\nreturned\n\nplot(netMod)\n\n\n\n\n\n\n\n\n\n#show the best tuning parameters\nnetMod$bestTune\n\n    alpha lambda\n145  0.35  0.025\n\n\n\n#use predict() to evaluate model on training dataset\nnetTrain &lt;- predict(netMod, newdata = bankrupt_train)\npostResample(netTrain, obs = bankrupt_train$bankrupt)\n\n Accuracy     Kappa \n0.9698366 0.1839122 \n\nnetConf &lt;-confusionMatrix(netTrain, bankrupt_train$bankrupt)\nnetConf\n\nConfusion Matrix and Statistics\n\n          Reference\nPrediction    0    1\n         0 4613  137\n         1    7   17\n                                          \n               Accuracy : 0.9698          \n                 95% CI : (0.9646, 0.9745)\n    No Information Rate : 0.9677          \n    P-Value [Acc &gt; NIR] : 0.2197          \n                                          \n                  Kappa : 0.1839          \n                                          \n Mcnemar's Test P-Value : &lt;2e-16          \n                                          \n            Sensitivity : 0.9985          \n            Specificity : 0.1104          \n         Pos Pred Value : 0.9712          \n         Neg Pred Value : 0.7083          \n             Prevalence : 0.9677          \n         Detection Rate : 0.9663          \n   Detection Prevalence : 0.9950          \n      Balanced Accuracy : 0.5544          \n                                          \n       'Positive' Class : 0               \n                                          \n\nnetMod$bestTune\n\n    alpha lambda\n145  0.35  0.025\n\n\nThe best Elastic Net model on the training data based on accuracy is the model with alpha = 0.35 and lambda = 0.025. The accuracy of this model is not significantly higher than the NIR. This model also takes quite a bit of time to train, ~10 minutes.\n\n\nGeneral Additive Model Family\nThe general additive model can be either a parametric or non-parametric model that is the linear combination of basis funtions. Below, we will use smoothing splines. The smooting splines subject the model loss function minimization to a regularization penalty, lambda. Lambda and degrees of freedom are the tuning parameters for smoothing spline models. The smoothing spline model is non-parametric, and cannot be used to perform inference on the predictors. The model performs shrinkage of the predictors, but does not select variables. Because of collinearity concerns, however, I did decide to use Principal Components Analysis prior to training the model.\nI believe collinearity is causing a problem with the original training dataset. I was unable to fit the general additive model with all variables, even using the smoothing splines as a regularization technique. Let’s check the correlation in the training dataset.\n\n#create data frame of numeric values without the factors for evaluation of correlation\nnumDataTrain &lt;- bankrupt_train |&gt;\n  select(where(is.numeric))\nfullCorrTrain &lt;- (cor(numDataTrain))\nlongCorrTrain &lt;- cor_gather(fullCorrTrain)\n#sort and filter correlation \nlongCorrTrain &lt;- longCorrTrain |&gt;\n  arrange(desc(cor)) |&gt;\n  filter(cor &lt; 1 & cor &gt; 0.7)\n  \nlongCorrTrain\n\n# A tibble: 146 × 3\n   var1             var2               cor\n   &lt;chr&gt;            &lt;chr&gt;            &lt;dbl&gt;\n 1 grsPrftToSales   opGrsMargin       1.00\n 2 opGrsMargin      grsPrftToSales    1.00\n 3 nvpsC            nvpsA             1.00\n 4 nvpsA            nvpsC             1.00\n 5 aTaxNetInt       pTaxNetInt        1.00\n 6 pTaxNetInt       aTaxNetInt        1.00\n 7 realSlsGrsMargin opGrsMargin       1.00\n 8 opGrsMargin      realSlsGrsMargin  1.00\n 9 grsPrftToSales   realSlsGrsMargin  1.00\n10 realSlsGrsMargin grsPrftToSales    1.00\n# ℹ 136 more rows\n\n\nSome of the variables have correlation of 1.0. We need to deal with these, since I cannot train the model using all of the predictors in the training dataset (errors not shown). We’ll use PCA in the pre-processing, which also necessitates centering and scaling the data.\n\n#set seed for reproducibility\nset.seed(10)\n#train smooting splines (gamSpline() family) using 10 fold cv.  \n#model takes ~40 minutes to train\ngamMod &lt;- train(bankrupt ~ ., data = bankrupt_train,\n                 method = \"gamSpline\",\n                 family = \"binomial\",\n                 preProcess = c(\"center\", \"scale\",\"pca\"),\n                 trControl = trainControl(method = \"cv\", \n                                          number = 10),\n                 tuneGrid = data.frame(df = c(2,3,4,5,6,7))\n)\n\nLoading required package: gam\n\n\nLoading required package: splines\n\n\nLoading required package: foreach\n\n\nWarning: package 'foreach' was built under R version 4.2.3\n\n\n\nAttaching package: 'foreach'\n\n\nThe following objects are masked from 'package:purrr':\n\n    accumulate, when\n\n\nLoaded gam 1.22-5\n\nplot(gamMod)\n\n\n\n\n\n\n\n\n\n#get best tuning parameter\ngamMod$bestTune\n\n  df\n3  4\n\n\n\n#generate and display confusion matrix for training metrics\ngamTrain &lt;- predict(gamMod, newdata = bankrupt_train)\npostResample(gamTrain, obs = bankrupt_train$bankrupt)\n\n Accuracy     Kappa \n0.9775869 0.5226651 \n\ngamConf &lt;-confusionMatrix(gamTrain, bankrupt_train$bankrupt)\ngamConf\n\nConfusion Matrix and Statistics\n\n          Reference\nPrediction    0    1\n         0 4606   93\n         1   14   61\n                                         \n               Accuracy : 0.9776         \n                 95% CI : (0.973, 0.9816)\n    No Information Rate : 0.9677         \n    P-Value [Acc &gt; NIR] : 3.047e-05      \n                                         \n                  Kappa : 0.5227         \n                                         \n Mcnemar's Test P-Value : 4.680e-14      \n                                         \n            Sensitivity : 0.9970         \n            Specificity : 0.3961         \n         Pos Pred Value : 0.9802         \n         Neg Pred Value : 0.8133         \n             Prevalence : 0.9677         \n         Detection Rate : 0.9648         \n   Detection Prevalence : 0.9843         \n      Balanced Accuracy : 0.6965         \n                                         \n       'Positive' Class : 0              \n                                         \n\n\nThe training accuracy of this model is significantly different than the NIR. The model that has the highest training accuracy has 4 degrees of freedom and kappa = 0.5226651.\n\n\nSingle Classification Tree Model\nThe classification tree is a model that splits the data using recursive binary splitting. This technique evaluates every possible split in the data, and selects the split point where the RSS is minimized. This is repeated down each branch of the tree until a certain stopping point is reached or each branch reaches a terminal node. Leaving a fully grown tree will result in overfitting the data.\nThe classification tree does not perform variable selection and cannot be used to perform inference, although variable importance is supplied and has a roughly similar interpretation in that variables are ranked in their relative contribution to the models predictive ability.\nThe classification tree is a non-parametric model and therefore cannot be used to perform inference. There is one tuning parameter, alpha, which is the complexity parameter. This complexity paramater may be used to prune the tree to find the “best” model. We do not have to pre-process the predictors for this model.\n\n#train smooting splines (gamSpline() family) using 10 fold cv.\nset.seed(10)\n#train tree model using 10 fold cv\ntreeMod &lt;- train(bankrupt ~ ., data = bankrupt_train,\n                 method = \"rpart\",\n                 trControl = trainControl(method = \"cv\", \n                                          number = 10))\n\nplot(treeMod)\n\n\n\n\n\n\n\n\n\n#get best tuning parameter\ntreeMod$bestTune\n\n          cp\n2 0.01948052\n\n\n\n#predict on the training dataset and calculate accuracy, and plot confusion matrix\ntreeTrain &lt;- predict(treeMod, newdata = bankrupt_train)\npostResample(treeTrain, obs = bankrupt_train$bankrupt)\n\n Accuracy     Kappa \n0.9746544 0.4163684 \n\ntreeConf &lt;-confusionMatrix(treeTrain, bankrupt_train$bankrupt)\ntreeConf\n\nConfusion Matrix and Statistics\n\n          Reference\nPrediction    0    1\n         0 4608  109\n         1   12   45\n                                          \n               Accuracy : 0.9747          \n                 95% CI : (0.9698, 0.9789)\n    No Information Rate : 0.9677          \n    P-Value [Acc &gt; NIR] : 0.002993        \n                                          \n                  Kappa : 0.4164          \n                                          \n Mcnemar's Test P-Value : &lt; 2.2e-16       \n                                          \n            Sensitivity : 0.9974          \n            Specificity : 0.2922          \n         Pos Pred Value : 0.9769          \n         Neg Pred Value : 0.7895          \n             Prevalence : 0.9677          \n         Detection Rate : 0.9652          \n   Detection Prevalence : 0.9881          \n      Balanced Accuracy : 0.6448          \n                                          \n       'Positive' Class : 0               \n                                          \n\n\n\n#plot variable importance\nplot(varImp(treeMod))\n\n\n\n\n\n\n\n\nVisualizing 93 predictors is challenging to impossible in this graph. In fact, the importance is diplayed as 0 below an importance of 6.97:\n\n#display importance numbers in a dataframe.\nvarImp(treeMod)\n\nrpart variable importance\n\n  only 20 most important variables shown (out of 94)\n\n                   Overall\nnetValgRate        100.000\npEPSl4S             81.732\nnetIncToStkhldrEq   54.311\nnetPrftBTaxPaidCap  51.257\npsNetPftbTax        50.053\ntotDetTotNetWrth    22.577\ndetRatio            22.577\nnvpsA               20.349\nquickRatio          19.494\nnetWrtAst           16.659\ntotAstsToGNPPrice   13.764\nnvpsC               11.614\nroaB                 8.778\nnvpsB                8.735\ncontIntATax          8.574\ncurLiabToAsts        6.978\nallRatePerson        0.000\ncurAstTurnoverRate   0.000\ncashCurLiab          0.000\nnetIncToTotAsts      0.000\n\n\nI’ll remove the importance variables that are 0 for more interpretability.\n\n#plot most important variables for visualization\na &lt;- varImp(treeMod)\na[[1]] &lt;- a[[1]] |&gt;\n  filter(Overall &gt; 5)\nplot(a)\n\n\n\n\n\n\n\n\nThe tree classification model predicts more accurately that the NIR at the alpha=0.05 confidence level with training accuracy of . It also trains relatively quickly compared to the GAM/Smoothing Spline model.\n\n\nEnsemble Tree Method\nThe ensemble tree models combine different techniques to arrive at more stable predictions on unseen data by using bootstrapping to randomly sample from the dataset, applying the model, then combining the models into an aggregate model. We’ll use the Random Forest model here to help account for any possibility that a strong predictor will commonly be the first split. The Random Forest model will randomly select a number of pre-defined predictors (p) for evaluating each split. When p=P, where P is the number of predictors in the full model, this will be the Bagged Tree model. This strategy will allow us to evaluate “two” models at once.\nThe ensemble tree models are extensions of the classification tree model used above. This model is non-parametric. The tuning parameter in the model below is the number of predictors to randomly select at each split (mtry). This model, like the classification tree, cannot be used for inference, but there is still the importance that can be interpreted in a similar fashion. The importance provides information as to which variables are most important for prediction, but does not perform variable selection. The data can be used as-is and do not need to be standardized.\n\n#set seed for reproducibility\nset.seed(10)\n#train rendom forest model with 1:nrow random predictors at each node\nforestGrid &lt;- expand.grid(.mtry=c(1:(ncol(bankrupt_train)-1)))\n#model takes ~30 minutes to train\nrfMod &lt;- train(bankrupt ~ ., data = bankrupt_train,\n                 method = \"rf\",\n                 metric = \"Accuracy\",\n                 tuneGrid = forestGrid, \n                 trControl = trainControl(method = \"oob\", \n                                          number = 1000))\n\n#plot accuracy\nplot(rfMod)\n\n\n\n\n\n\n\n\n\nrfMod$bestTune\n\n   mtry\n49   49\n\n\n\n#predict on the training dataset and calculate accuracy, and plot confusion matrix\nrfTrain &lt;- predict(rfMod, newdata = bankrupt_train)\npostResample(rfTrain, obs = bankrupt_train$bankrupt)\n\nAccuracy    Kappa \n       1        1 \n\nrfConf &lt;-confusionMatrix(rfTrain, bankrupt_train$bankrupt)\nrfConf\n\nConfusion Matrix and Statistics\n\n          Reference\nPrediction    0    1\n         0 4620    0\n         1    0  154\n                                     \n               Accuracy : 1          \n                 95% CI : (0.9992, 1)\n    No Information Rate : 0.9677     \n    P-Value [Acc &gt; NIR] : &lt; 2.2e-16  \n                                     \n                  Kappa : 1          \n                                     \n Mcnemar's Test P-Value : NA         \n                                     \n            Sensitivity : 1.0000     \n            Specificity : 1.0000     \n         Pos Pred Value : 1.0000     \n         Neg Pred Value : 1.0000     \n             Prevalence : 0.9677     \n         Detection Rate : 0.9677     \n   Detection Prevalence : 0.9677     \n      Balanced Accuracy : 1.0000     \n                                     \n       'Positive' Class : 0          \n                                     \n\n\nThis is unexpected to me…accuracy of 1. It will be intersting to see how this model works with the test dataset. Let’s see if importance makes any sense…\n\nplot(varImp(rfMod))\n\n\n\n\n\n\n\n\nThis is a nice smooth curve of the relative importance of the variables. I’ll filter for Importance &lt;16 so that the most important variables are clear.\n\n#shorten the importance plot to include only the most important for the fr model\nrfImpShort &lt;- varImp(rfMod)\nrfImpShort[[1]] &lt;- rfImpShort[[1]] |&gt;\n  filter(Overall &gt; 16)\nplot(rfImpShort)\n\n\n\n\n\n\n\n\nSome of the same features are present in the most important variable chart from Random Forest and from the Single Classification Tree.\n\n\nSupport Vector Machines\nSupport verctor machines can be both parametric and non-parametric. We will be using a kernal based method (radial basis) in which we will use cross-validation to tune the tuning parameter c, or cost and sigma.\n\n#C &lt;- exp(seq(-5,-1,len=10))\n#gamma &lt;- seq(from = 4, to = 7, by = 1)\n#svTuneGrid &lt;- expand.grid(C, sigma)\n#names(svTuneGrid) &lt;- c(\"C\", \"sigma\")\n#svTuneGrid\n\n\n#set seed for reproducibility\n#set.seed(10)\n#create tuning grig\n#svmGrid &lt;- expand.grid(C = exp(seq(-5,1,len=10)))\n#train model\n#svMod &lt;- train(bankrupt ~ ., data = bankrupt_train,\n#                 method = \"svmRadialSigma\",\n#                 tuneGrid = svTuneGrid, \n#                 trControl = trainControl(method = \"cv\", \n#                                          number = 10))\n\n#plot(svMod)\n\n\n#svMod$bestTune\n\n\n#predict and display training confusion matrix with tuned model\n#svTrain &lt;- predict(svMod, newdata = bankrupt_train)\n#(svTrain, obs = bankrupt_train$bankrupt)\n#svConf &lt;-confusionMatrix(svTrain, bankrupt_train$bankrupt)\n#svConf\n\nIt looks like the training accuracy of this model is no better than the NIR. I’ve commented out the radial SVM model above because it takes a very long time to train and doesn’t offer any additional insight for the tuning grid specified searching over sigma.\nI’ve recoded the same radial basis support vector machine model without searching through sigma in the tuning grid and get no better accuracy than the NIR.\n\nsvTuneGrid2 &lt;- (seq(from=-5,to=-1,by=1))\nsvTuneGrid2 &lt;- expand.grid(svTuneGrid2)\nnames(svTuneGrid2) &lt;- c(\"C\")\nsvTuneGrid2 &lt;- svTuneGrid2 |&gt;\n  mutate(C=exp(C))\n#svTuneGrid2\n\n\n#set seed for reproducibility\nset.seed(10)\n#create tuning grig\n#svmGrid &lt;- expand.grid(C = exp(seq(-5,1,len=10)))\n#train model\nsvMod2 &lt;- train(bankrupt ~ ., data = bankrupt_train,\n                 method = \"svmRadialCost\",\n                 tuneGrid = svTuneGrid2, \n                 trControl = trainControl(method = \"cv\", \n                                          number = 10))\n\nplot(svMod2)\n\n\n\n\n\n\n\n\n\nsvMod2$bestTune\n\n            C\n1 0.006737947\n\n\n\n#predict and display training confusion matrix with tuned model\nsvTrain2 &lt;- predict(svMod2, newdata = bankrupt_train)\npostResample(svTrain2, obs = bankrupt_train$bankrupt)\n\n Accuracy     Kappa \n0.9677419 0.0000000 \n\nsvConf2 &lt;-confusionMatrix(svTrain2, bankrupt_train$bankrupt)\nsvConf2\n\nConfusion Matrix and Statistics\n\n          Reference\nPrediction    0    1\n         0 4620  154\n         1    0    0\n                                          \n               Accuracy : 0.9677          \n                 95% CI : (0.9623, 0.9726)\n    No Information Rate : 0.9677          \n    P-Value [Acc &gt; NIR] : 0.5214          \n                                          \n                  Kappa : 0               \n                                          \n Mcnemar's Test P-Value : &lt;2e-16          \n                                          \n            Sensitivity : 1.0000          \n            Specificity : 0.0000          \n         Pos Pred Value : 0.9677          \n         Neg Pred Value :    NaN          \n             Prevalence : 0.9677          \n         Detection Rate : 0.9677          \n   Detection Prevalence : 1.0000          \n      Balanced Accuracy : 0.5000          \n                                          \n       'Positive' Class : 0               \n                                          \n\n\nThe radial SVM seems to not perform very well based on training cross validation accuracy. I decided to evaluate the radial SVM since it should fit non-linear data well. There may be a different SVM model that fits better but this would take significant time and computing power to sort out."
  },
  {
    "objectID": "ST563Project1.html#predicting-on-the-test-set",
    "href": "ST563Project1.html#predicting-on-the-test-set",
    "title": "ST563Project1",
    "section": "Predicting on the Test Set",
    "text": "Predicting on the Test Set\nSo far, we’ve partitioned the data into a training and test set, performed cross validation and tuning on the training dataset, and refit the best models for each family with the optimal tuning parameters (where appropriate) onto the full training dataset. Now, we need to see how each of the tuned models performs on unseen data. We will use predict() on the test dataset for each model and compare accuracy.\n\nknnTest &lt;- predict(knnMod, newdata=bankrupt_test)\nnetTest &lt;- predict(netMod, newdata=bankrupt_test)\ngamTest &lt;- predict(gamMod, newdata=bankrupt_test)\ntreeTest &lt;- predict(treeMod, newdata=bankrupt_test)\nrfTest &lt;- predict(rfMod, newdata=bankrupt_test)\nsvTest &lt;- predict(svMod2, newdata=bankrupt_test)\n\nNow, let’s check the test prediction accuracy\n\nkNN Test Prediction Accuracy/Confusion Matrix\n\n#confusion matrix for test precdiction accuracy\npostResample(knnTest, obs = bankrupt_test$bankrupt)\n\n Accuracy     Kappa \n0.9691932 0.2307945 \n\nknnTestConf &lt;-confusionMatrix(knnTest, bankrupt_test$bankrupt)\nknnTestConf\n\nConfusion Matrix and Statistics\n\n          Reference\nPrediction    0    1\n         0 1972   56\n         1    7   10\n                                          \n               Accuracy : 0.9692          \n                 95% CI : (0.9608, 0.9762)\n    No Information Rate : 0.9677          \n    P-Value [Acc &gt; NIR] : 0.384           \n                                          \n                  Kappa : 0.2308          \n                                          \n Mcnemar's Test P-Value : 1.472e-09       \n                                          \n            Sensitivity : 0.9965          \n            Specificity : 0.1515          \n         Pos Pred Value : 0.9724          \n         Neg Pred Value : 0.5882          \n             Prevalence : 0.9677          \n         Detection Rate : 0.9643          \n   Detection Prevalence : 0.9917          \n      Balanced Accuracy : 0.5740          \n                                          \n       'Positive' Class : 0               \n                                          \n\n\n\n\nElastic Net Test Prediction Accuracy/Confusion Matrix\n\n#confusion matrix for test precdiction accuracy\npostResample(netTest, obs = bankrupt_test$bankrupt)\n\n Accuracy     Kappa \n0.9691932 0.1939702 \n\nnetTestConf &lt;-confusionMatrix(netTest, bankrupt_test$bankrupt)\nnetTestConf\n\nConfusion Matrix and Statistics\n\n          Reference\nPrediction    0    1\n         0 1974   58\n         1    5    8\n                                          \n               Accuracy : 0.9692          \n                 95% CI : (0.9608, 0.9762)\n    No Information Rate : 0.9677          \n    P-Value [Acc &gt; NIR] : 0.384           \n                                          \n                  Kappa : 0.194           \n                                          \n Mcnemar's Test P-Value : 5.701e-11       \n                                          \n            Sensitivity : 0.9975          \n            Specificity : 0.1212          \n         Pos Pred Value : 0.9715          \n         Neg Pred Value : 0.6154          \n             Prevalence : 0.9677          \n         Detection Rate : 0.9653          \n   Detection Prevalence : 0.9936          \n      Balanced Accuracy : 0.5593          \n                                          \n       'Positive' Class : 0               \n                                          \n\n\n\n\nGAM/Smoothing Splines Test Prediction Accuracy/Confusion Matrix\n\n#confusion matrix for test precdiction accuracy\npostResample(gamTest, obs = bankrupt_test$bankrupt)\n\n Accuracy     Kappa \n0.9701711 0.3822211 \n\ngamTestConf &lt;-confusionMatrix(gamTest, bankrupt_test$bankrupt)\ngamTestConf\n\nConfusion Matrix and Statistics\n\n          Reference\nPrediction    0    1\n         0 1964   46\n         1   15   20\n                                          \n               Accuracy : 0.9702          \n                 95% CI : (0.9618, 0.9771)\n    No Information Rate : 0.9677          \n    P-Value [Acc &gt; NIR] : 0.2912799       \n                                          \n                  Kappa : 0.3822          \n                                          \n Mcnemar's Test P-Value : 0.0001225       \n                                          \n            Sensitivity : 0.9924          \n            Specificity : 0.3030          \n         Pos Pred Value : 0.9771          \n         Neg Pred Value : 0.5714          \n             Prevalence : 0.9677          \n         Detection Rate : 0.9604          \n   Detection Prevalence : 0.9829          \n      Balanced Accuracy : 0.6477          \n                                          \n       'Positive' Class : 0               \n                                          \n\n\n\n\nSingle Classification Tree Test Prediction Accuracy/Confusion Matrix\n\n#confusion matrix for test precdiction accuracy\npostResample(treeTest, obs = bankrupt_test$bankrupt)\n\n Accuracy     Kappa \n0.9667482 0.2312115 \n\ntreeTestConf &lt;-confusionMatrix(treeTest, bankrupt_test$bankrupt)\ntreeTestConf\n\nConfusion Matrix and Statistics\n\n          Reference\nPrediction    0    1\n         0 1966   55\n         1   13   11\n                                         \n               Accuracy : 0.9667         \n                 95% CI : (0.958, 0.9741)\n    No Information Rate : 0.9677         \n    P-Value [Acc &gt; NIR] : 0.6294         \n                                         \n                  Kappa : 0.2312         \n                                         \n Mcnemar's Test P-Value : 6.627e-07      \n                                         \n            Sensitivity : 0.9934         \n            Specificity : 0.1667         \n         Pos Pred Value : 0.9728         \n         Neg Pred Value : 0.4583         \n             Prevalence : 0.9677         \n         Detection Rate : 0.9614         \n   Detection Prevalence : 0.9883         \n      Balanced Accuracy : 0.5800         \n                                         \n       'Positive' Class : 0              \n                                         \n\n\n\n\nRandom Forest Single Classification Tree Test Prediction Accuracy/Confusion Matrix\n\n#confusion matrix for test precdiction accuracy\npostResample(rfTest, obs = bankrupt_test$bankrupt)\n\n Accuracy     Kappa \n0.9721271 0.3040522 \n\nrfTestConf &lt;-confusionMatrix(rfTest, bankrupt_test$bankrupt)\nrfTestConf\n\nConfusion Matrix and Statistics\n\n          Reference\nPrediction    0    1\n         0 1975   53\n         1    4   13\n                                         \n               Accuracy : 0.9721         \n                 95% CI : (0.964, 0.9788)\n    No Information Rate : 0.9677         \n    P-Value [Acc &gt; NIR] : 0.143          \n                                         \n                  Kappa : 0.3041         \n                                         \n Mcnemar's Test P-Value : 2.047e-10      \n                                         \n            Sensitivity : 0.9980         \n            Specificity : 0.1970         \n         Pos Pred Value : 0.9739         \n         Neg Pred Value : 0.7647         \n             Prevalence : 0.9677         \n         Detection Rate : 0.9658         \n   Detection Prevalence : 0.9917         \n      Balanced Accuracy : 0.5975         \n                                         \n       'Positive' Class : 0              \n                                         \n\n\n\n\nSupport Vector Machine Test Prediction Accuracy/Confusion Matrix\n\n#confusion matrix for test precdiction accuracy\npostResample(svTest, obs = bankrupt_test$bankrupt)\n\n Accuracy     Kappa \n0.9677262 0.0000000 \n\nsvTestConf &lt;-confusionMatrix(svTest, bankrupt_test$bankrupt)\nsvTestConf\n\nConfusion Matrix and Statistics\n\n          Reference\nPrediction    0    1\n         0 1979   66\n         1    0    0\n                                         \n               Accuracy : 0.9677         \n                 95% CI : (0.9591, 0.975)\n    No Information Rate : 0.9677         \n    P-Value [Acc &gt; NIR] : 0.5327         \n                                         \n                  Kappa : 0              \n                                         \n Mcnemar's Test P-Value : 1.235e-15      \n                                         \n            Sensitivity : 1.0000         \n            Specificity : 0.0000         \n         Pos Pred Value : 0.9677         \n         Neg Pred Value :    NaN         \n             Prevalence : 0.9677         \n         Detection Rate : 0.9677         \n   Detection Prevalence : 1.0000         \n      Balanced Accuracy : 0.5000         \n                                         \n       'Positive' Class : 0              \n                                         \n\n\nNone of the models are significantly different from the NIR at the alpha=0.05 confidence level. In the interest of picking a “best” model, I would pick the Random Forest model as it has the highest absolute accuracy.\n\n#extrac test accuracies for tabling.\nkA &lt;- knnTestConf[[3]][1]\nnetA &lt;- netTestConf[[3]][1]\ngA &lt;- gamTestConf[[3]][1]\ntA &lt;- treeTestConf[[3]][1]\nrfA &lt;- rfTestConf[[3]][1]\nsvA &lt;- svTestConf[[3]][1]\n\ntestAcc &lt;- c(kA, netA, gA, tA, rfA, svA)\nnameAcc &lt;- c(\"kNN\", \"Elastic Net\", \"Smoothing Splines\", \"Single Tree\", \"Random Forest\", \"Support Vector Machine\")\n\n#create table of accuracy values\naccTbl &lt;- as_tibble(rbind(nameAcc, testAcc))\n\nWarning: The `x` argument of `as_tibble.matrix()` must have unique column names if\n`.name_repair` is omitted as of tibble 2.0.0.\nℹ Using compatibility `.name_repair`.\n\naccTbl\n\n# A tibble: 2 × 6\n  Accuracy         V2               V3                V4             V5    V6   \n  &lt;chr&gt;            &lt;chr&gt;            &lt;chr&gt;             &lt;chr&gt;          &lt;chr&gt; &lt;chr&gt;\n1 kNN              Elastic Net      Smoothing Splines Single Tree    Rand… Supp…\n2 0.96919315403423 0.96919315403423 0.970171149144254 0.96674816625… 0.97… 0.96…"
  },
  {
    "objectID": "ST563Project1.html#full-data-set-fit",
    "href": "ST563Project1.html#full-data-set-fit",
    "title": "ST563Project1",
    "section": "Full Data Set Fit",
    "text": "Full Data Set Fit\nLastly, we’ll fit the “best” model, the Random Forest model on the full dataset.\n\n#set seed for reproducibility\nset.seed(10)\n#extract m from the best model\nm &lt;- rfMod$bestTune[[1]]\nrfFull &lt;- randomForest(bankrupt ~ ., data=data2,\n                       importance = TRUE,\n                       type = \"classification\",\n                       mtry=m)\n\nrfFull$confusion\n\n     0  1 class.error\n0 6575 24 0.003636915\n1  167 53 0.759090909\n\n\nWe’ll also calculate the NIR for the full model.\n\n#create table of class proportions in training dataset for calculation of NIR.\nfullClassProp &lt;- table(data2$bankrupt)\nfullClassProp\n\n\n   0    1 \n6599  220 \n\n#dim(trainClassProp)\n\nThe most prevalent class is non-bankrupt company (this should be true in the training and test sets, since we split the data to have balanced proporations of the dependent variable, bankrupt.)\n\n#full NIR\nNIR &lt;- (fullClassProp[1]/nrow(data2))\nNIR\n\n        0 \n0.9677372 \n\n\nNow let’s calculate the full model accuracy to compare to the NIR:\n\ncorrect &lt;- rfFull$confusion[1,1]+rfFull$confusion[2,2]\nfullModAccuracy &lt;- correct/nrow(data2)\nfullModAccuracy\n\n[1] 0.97199\n\n\nSO the full model still appears to be slightly better than the NIR by absolute difference. Regardless, the model could potentially predict risk of defaul/bankruptcy using business metrics where the bankruptcy event has not occured. For example, if a venture capital fund was trying to invest in 30 businesses, a model that could predict risk of bankruptcy at 97% would lead to ~1 company defaulting out of the 30 investments. This would be a way to understand the risk when ~ 30% of venture capitol investments fail and investors lose all of their capital 3. If this model could be applied to US based businesses and these data are available, it could be part of a comprehensive risk evaluation during the investment period."
  }
]